version: '3.8'
# Complete Docker Compose configuration for Crypto Hunter
name: crypto-hunter

x-common-env: &common-env
  SECRET_KEY: ${SECRET_KEY}
  DATABASE_URL: postgresql://crypto_hunter:${DB_PASSWORD}@db:5432/crypto_hunter
  REDIS_URL: redis://redis:6379/0
  CELERY_BROKER_URL: redis://redis:6379/2
  CELERY_RESULT_BACKEND: redis://redis:6379/3
  FLASK_ENV: ${FLASK_ENV:-production}
  FLASK_DEBUG: ${FLASK_DEBUG:-0}
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  SQLALCHEMY_DATABASE_URI: postgresql://crypto_hunter:${DB_PASSWORD}@db:5432/crypto_hunter
  SQLALCHEMY_TRACK_MODIFICATIONS: ${SQLALCHEMY_TRACK_MODIFICATIONS:-False}
  AUTO_REINIT_DB: ${AUTO_REINIT_DB:-false}
  ENABLE_REGISTRATION: "false"
  ENABLE_AI_ANALYSIS: "true"
  ENABLE_BACKGROUND_TASKS: "true"
  MAX_CONTENT_LENGTH: "1073741824"

services:
  db:
    image: postgres:15-alpine
    container_name: crypto-hunter-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: crypto_hunter
      POSTGRES_USER: crypto_hunter
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-hunter-network
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crypto_hunter -d crypto_hunter"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  redis:
    image: redis:6-alpine
    container_name: crypto-hunter-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - crypto-hunter-network
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  web:
    build:
      context: ..
      target: production
    image: crypto-hunter:latest
    container_name: crypto-hunter-web
    restart: unless-stopped
    environment: *common-env
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      - ../instance:/app/instance
    networks:
      - crypto-hunter-network
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  worker:
    build:
      context: ..
      target: production
    image: crypto-hunter:latest
    container_name: crypto-hunter-worker
    restart: unless-stopped
    command: celery -A crypto_hunter_web.services.celery_app worker --loglevel=info --concurrency=4
    environment: *common-env
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      - ../instance:/app/instance
    networks:
      - crypto-hunter-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  beat:
    build:
      context: ..
      target: production
    image: crypto-hunter:latest
    container_name: crypto-hunter-beat
    restart: unless-stopped
    command: celery -A crypto_hunter_web.services.celery_app beat --loglevel=info
    environment: *common-env
    volumes:
      - logs_data:/app/logs
    networks:
      - crypto-hunter-network
    depends_on:
      redis:
        condition: service_healthy

  flower:
    build:
      context: ..
      target: production
    image: crypto-hunter:latest
    container_name: crypto-hunter-flower
    restart: unless-stopped
    command: celery -A crypto_hunter_web.services.celery_app flower --port=5555 --basic_auth=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-admin123}
    environment: *common-env
    networks:
      - crypto-hunter-network
    ports:
      - "127.0.0.1:5557:5555"
    depends_on:
      redis:
        condition: service_healthy

  # Database management tools for development
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crypto-hunter-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/var/lib/pgadmin/.pgpass:ro
    command: >
      sh -c "
        chmod 600 /var/lib/pgadmin/.pgpass &&
        /entrypoint.sh
      "
    networks:
      - crypto-hunter-network
    ports:
      - "127.0.0.1:5051:80"
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - dev
      - tools

  # Redis management tool
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: crypto-hunter-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin123}
    networks:
      - crypto-hunter-network
    ports:
      - "127.0.0.1:8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - dev
      - tools

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  logs_data:
  pgadmin_data:

networks:
  crypto-hunter-network:
    driver: bridge
